# Problem: The Dyson fan doesn't have auto-shutoff capabilities. The "auto" preset
# continues to blow hot air at the lowest speed to maintain the same temperature,
# once the desired temperature has been reached.
#
# Desired State: It is OK for temperature to fluctuate between a specified range.
# When the room gets too cold (as measured by the fan), the heat should turn on
# to warm it up until an acceptable level is reached. Then, it should turn off
# and let the room gradually cool down naturally.
#
# TODO: Consider moving more of this logic to a script layer. Specifically, by converting
# the trigger variable to a script input, we are able to better test this logic without needing
# to actually wait for a specific temperature to be hit.

id: "dyson-fan-manager"
mode: single
alias: Dyson Fan Manager
description: >-
  Implements a slightly more energy efficient climate controller with the Dyson fan. 

trigger:
  - platform: state
    entity_id:
      - sensor.air_purifier_fan_temperature

condition: []

variables:
  # When the temperature falls below this level, turn on the heat.
  heat_low: 69

  # When the temperature is above this level, turn off the heat.
  heat_high: 72

  # When the heater is turned on, set the temperature to this value.
  # The difference between this and [heat_high] is that we can somewhat control the speed
  # at which the temperature is increased (assuming "Auto" mode controls fan speed).
  heat_target: 74

  # If the fan is turned on AND the temparture falls below this value, turn off the fan.
  cool_target: 72

action:
  # Heat the room if the temperature falls below a specific threshold.
  - if:
      - condition: and
        conditions:
          # NOTE: This condition helps prevent multiple successive commands
          # being sent to the same device.
          - condition: state
            entity_id: fan.air_purifier_fan
            state: "off"

          # NOTE: Currently, we only care about heating the room in the evening.
          - condition: time
            after: "19:00:00"
            before: "07:00:00"

          - condition: template
            value_template: "{{ states('sensor.air_purifier_fan_temperature') | float <= heat_low }}"

    then:
      - service: fan.set_direction
        data:
          direction: forward
        target:
          entity_id: fan.air_purifier_fan

      - service: dyson_local.set_angle
        data:
          entity_id: fan.air_purifier_fan
          angle_low: 145
          angle_high: 215

      # NOTE: Night mode makes the fan quieter.
      # TODO: Consider adjusting this if we turn the fan on to clean the air.
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.air_purifier_fan_night_mode

      - service: fan.turn_on
        data:
          preset_mode: "Auto"
        target:
          entity_id: fan.air_purifier_fan

      - service: climate.set_temperature
        data:
          temperature: "{{ heat_target }}"
          hvac_mode: heat
        target:
          entity_id: climate.air_purifier_fan

  # The inverse of the above scenario: turn off the heat once the desired
  # temperature has been reached.
  - if:
      - condition: and
        conditions:
          - condition: state
            entity_id: fan.air_purifier_fan
            state: "on"

          # NOTE: This condition is important because we want to avoid the
          # scenario where the fan auto-turns off despite attempting to cool
          # down the room.
          - condition: state
            entity_id: climate.air_purifier_fan
            state: "heat"

          - condition: template
            value_template: "{{ states('sensor.air_purifier_fan_temperature') | float >= heat_high }}"

    then:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.air_purifier_fan

  # If we manually turn on the fan to cool the room down, make sure to
  # turn it off when we don't need it anymore.
  - if:
      - condition: and
        conditions:
          - condition: state
            entity_id: fan.air_purifier_fan
            state: "on"

          - condition: state
            entity_id: climate.air_purifier_fan
            state: "cool"

          - condition: template
            value_template: "{{ states('sensor.air_purifier_fan_temperature') | float <= cool_target }}"

    then:
      - service: fan.turn_off
        data: {}
        target:
          entity_id: fan.air_purifier_fan
