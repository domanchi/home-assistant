# The IKEA STYRBAR Switch is a useful tactile tool that essentially allows
# configurable, arbitrary API commands on a Zigbee network. It has four buttons,
# and 12 event listeners (each button has press, hold, release).

id: "ikea-switch-manager"
mode: parallel
alias: IKEA Switch Manager
description: Action to take when the IKEA Switch's buttons are pressed.

# For more information, see https://www.zigbee2mqtt.io/devices/E2001_E2002.html
trigger:
  - platform: mqtt
    topic: zigbee2mqtt/Button

condition: []

action:
  - variables:
      sleep_time_minutes: 45

  # We want to handle parallel actions, but we want each individual action to
  # be synchronous. Therefore, we add a mutex on each invoked action.
  #
  # NOTE: For some reason, parallel mode sometimes causes this to occur.
  # Sanity check this to prevent unexpected triggers.
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == '' }}"
    then:
      - stop: No action identified.

  # NOTE: Saver doesn't support default arguments right now, so we'll have to
  # manually initialize it before this can work.
  #
  # The variables to initialize are:
  #   - mutex.switch: []
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action in (saver_variable('mutex.switch') | from_json) }}"
    then:
      - stop: Action is currently processing.
    else:
      - service: saver.set_variable
        data:
          name: mutex.switch
          value: "{{ ((saver_variable('mutex.switch') | from_json) + [trigger.payload_json.action]) | to_json}}"

  # Control a night light, with auto-sleep functionality.
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == 'on' }}"
    then:
      - service: light.turn_on
        data:
          brightness_pct: 10
        target:
          device_id: c22dbfaab2c97feb31a3333c0a50c8c1

      # Wait for some time, before turning the night light off.
      - delay:
          hours: 2

      - service: light.turn_off
        data: {}
        target:
          device_id: c22dbfaab2c97feb31a3333c0a50c8c1

  # Play music.
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == 'off' }}"
    then:
      - service: script.start_playlist
        data:
          target: 59fef5200aac2941d3a580287413dd49

      # NOTE: Implement wait here (rather than setting the initial_delay
      # parameter), so that we can essentially use the mutex / CV without a
      # leaky abstraction within the fader.
      - repeat:
          sequence:
            - delay:
                minutes: 1
          while:
            - condition: template
              value_template: "{{ trigger.payload_json.action in (saver_variable('mutex.switch') | from_json) }}"
            - condition: template
              value_template: "{{ repeat.index < sleep_time_minutes }}"

      - if:
          - condition: template
            value_template: "{{ trigger.payload_json.action in (saver_variable('mutex.switch') | from_json) }}"
        then:
          - service: script.fade_out
            data:
              entity_id: "media_player.home_theater"

  # Stop music
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == 'brightness_move_down' }}"
    then:
      - service: media_player.media_stop
        data: {}
        target:
          device_id: 59fef5200aac2941d3a580287413dd49

      # Clear the mutex on the play action
      - service: saver.set_variable
        data:
          name: mutex.switch
          value: "{{ (saver_variable('mutex.switch') | from_json) | reject('==', 'off') | list | to_json }}"

  # NOTE: Saver doesn't support default arguments right now, so we'll have to
  # manually initialize it before this can work.
  #
  # The variables to initialize are:
  #   - playlist_id: 0
  #   - playlists:   [{ name: "", volume: 0 }, ...]
  #
  # TODO: setup volume
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == 'arrow_left_click' }}"
    then:
      - service: saver.set_variable
        data:
          name: playlist_id
          value: "{{ ((saver_variable('playlist_id') | int) - 1) % (saver_variable('playlists') | from_json | length) }}"

      # Allow reloading of playlist if already in playing state.
      - if:
          - condition: state
            entity_id: media_player.home_theater
            state: playing
        then:
          - service: script.start_playlist
            data:
              target: 59fef5200aac2941d3a580287413dd49

  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.action == 'arrow_right_click' }}"
    then:
      - service: saver.set_variable
        data:
          name: playlist_id
          value: "{{ ((saver_variable('playlist_id') | int) + 1) % (saver_variable('playlists') | from_json | length) }}"

      # Allow reloading of playlist if already in playing state.
      - if:
          - condition: state
            entity_id: media_player.home_theater
            state: playing
        then:
          - service: script.start_playlist
            data:
              target: 59fef5200aac2941d3a580287413dd49

  # Clear the mutex once complete.
  - service: saver.set_variable
    data:
      name: mutex.switch
      value: "{{ (saver_variable('mutex.switch') | from_json) | reject('==', trigger.payload_json.action) | list | to_json }}"

  # NOTE: Unfortunately, we need to catch this on button press (rather than
  # being independent to actual usage) because I can't get status requests to
  # work over MQTT.
  - if:
      - condition: template
        value_template: "{{ trigger.payload_json.battery <= 10 }}"
    then:
      - service: notify.pockets_inc
        data:
          target: "#chores"
          message: Change the IKEA Switch's battery.
          data:
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: The *IKEA Switch* needs its battery changed.
                    It is currently on *{{ trigger.payload_json.battery}}%*.

